/*
 * HELPER
 * Properties with REM and PX fallback
 */

@mixin rem($property, $values, $base: $base-size-desktop) {
  $px: ();
  $rem: ();

  @each $value in $values {
    @if $value == 0 or $value == auto {
      $px: append($px, $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px: append($px, $value);
        $rem: append($rem, ($val / parseInt($base) + rem));
      }

      @if $unit == "rem" {
        $px: append($px, ($val * parseInt($base) + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

/*
 * GRID SIZES
 * Change these variables for customization
 */

$grid-margin: 10px;
$grid-gutter: 20px;
$grid-max-width: 1176px;

/*
 * GRID HELPERS
 * Helpers classes
 */

.grid-align-right {
  text-align: right;
}

.grid-align-left {
  text-align: left;
}

.grid-align-center {
  text-align: center;
}

/*
 * GRID MIXINS
 * You don't need to touch this
 */

@mixin container($margin: null, $max-width: null) {
  @if $margin != null {
    @include rem(padding, 0 $margin);
  }

  @if $max-width != null {
    @if $margin != null {
      @include rem(max-width, calc(#{$max-width} + (#{$margin} * 2)));
    } @else {
      @include rem(max-width, $max-width);
    }
  }

  margin-left: auto;
  margin-right: auto;
  box-sizing: border-box;
  font-size: 0;
  @include rem(margin-bottom, $grid-gutter);
  display: block;

  &:last-of-type {
    margin-bottom: 0;
  }
}

@mixin column($size, $space) {
  $space: $space / $size;
  $size: $size / $size;

  box-sizing: border-box;
  display: inline-block;
  vertical-align: top;
  width: calc(((((100% - (#{$grid-gutter} * (#{$space} - 1))) * #{$size}) / #{$space})) + (#{$grid-gutter} * (#{$size} - 1)));
  width: calc(((((100% - (#{$grid-gutter} * (#{$space}))) * #{$size}) / #{$space})) + (#{$grid-gutter} * (#{$size} - 1)))\9;
  @include rem(margin-right, $grid-gutter);
  font-size: 1rem;

  &:last-of-type {
    margin-right: 0;
  }

  @if $size == $space {
    width: 100%;
    margin-right: 0;
    @include rem(margin-bottom, $grid-gutter);

    &:last-of-type {
      margin-bottom: 0;
    }
  }
}

@mixin columns($class, $size, $space) {
  $space: $space / $size;
  $size: $size / $size;

  .#{$class} {
    @include column($size, $space);
    @include rem(margin-bottom, $grid-gutter);

    &:nth-child(#{$space / $size}n) {
      margin-right: 0;
    }

    &:nth-last-child(-n + #{$space}) {
      margin-bottom: 0;
    }

    $coefficient: $space / $size;

    @if round($coefficient) != $coefficient {
      &:last-of-type {
        @include rem(margin-right, $grid-gutter);
      }
    }
  }
}
